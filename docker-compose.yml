# version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: ${POSTGRES_PORT:-5432}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TZ: ${TZ:-Europe/Moscow}
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  postgres:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      TZ: ${TZ:-Europe/Moscow}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-user-log}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 256M

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm run migrate:up && npm run seed:run"
    environment:
      DB_HOST: ${POSTGRES_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      TS_NODE_PROJECT: "tsconfig.esm.json"
    restart: on-failure
    volumes:
      - .:/app
      - /app/node_modules
      - ./src:/app/src
      - ./src/database/migrations:/app/database/migrations
      - ./src/database/seeds:/app/database/seeds
    networks:
      - app-network

  test-db:
    image: postgres:16
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - test-pg-data:/var/lib/postgresql/data
    networks:
      - app-network

  test-redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - test-redis-data:/data
    networks:
      - app-network

  test-runner:
    build: .
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      NODE_ENV: test
      DB_HOST: test-db
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_NAME: test_db
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "
      # Ждем готовности PostgreSQL
      while ! pg_isready -h test-db -U test_user -d test_db; do sleep 1; done

      # Ждем готовности Redis
      while ! nc -z test-redis 6379; do sleep 1; done

      # Применяем миграции
      cd src/database/migrations
      knex migrate:latest --env test
      knex seed:run --env test

      # Запускаем тесты
      cd /app
      npm run test:integration
      "
    networks:
      - app-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  test-pg-data:
    driver: local
  test-redis-data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
#
#
#

